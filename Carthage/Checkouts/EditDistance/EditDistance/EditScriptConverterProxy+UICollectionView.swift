//
//  EditDistanceConverter+UICollectionView.swift
//  EditDistance
//
//  Copyright (c) 2017 Kazuhiro Hayashi
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.

import UIKit

public extension EditScriptConverterProxy where Converter: UICollectionView {
    
    /// Updates this UICollectionView object with EditDistanceContainer object.
    ///
    /// EditScript array in the object is converted to insertItems(at:) and deleteItems(at:) of UICollectionView
    ///
    /// - Parameters:
    ///   - container: EditDistanceContainer object generated by EditDistance
    ///   - completion: completion handler
    @available(tvOS, unavailable)
    public func performBatchUpdates<T>(with container: EditDistanceContainer<T>, completion: ((Bool) -> Void)?) {
        _performBatchUpdates(with: container, completion: completion)
    }

    /// Reload this UICollectionView object if it is empty.
    /// The other case, updates this UICollectionView object with EditDistanceContainer object.
    /// Because apps working on tvOS or iOS 8.0 crash when it updates the empty collectionView, use this method to update incrementally.
    ///
    /// EditScript array in the object is converted to insertItems(at:) and deleteItems(at:) of UICollectionView
    ///
    /// - Parameters:
    ///   - container: EditDistanceContainer object generated by EditDistance
    ///   - completion: completion handler
    public func performBatchUpdatesStartingWithReload<T>(with container: EditDistanceContainer<T>, completion: ((Bool) -> Void)?) {
        let needsReloadData = _converter.visibleCells.isEmpty
        if needsReloadData {
            UIView.animate(withDuration: 0, animations: { [weak self] in
                self?._converter.reloadData()
            }, completion: { (finish) in
                completion?(finish)
            })
        } else {
            _performBatchUpdates(with: container, completion: completion)
        }
    }
    
    private func _performBatchUpdates<T>(with container: EditDistanceContainer<T>, completion: ((Bool) -> Void)?) {
        _converter.performBatchUpdates({ [weak self] in
            container.editScripts.forEach({ (script) in
                switch script {
                case .add(_, let indexPath):
                    self?._converter.insertItems(at: [indexPath])
                case .delete(_, let indexPath):
                    self?._converter.deleteItems(at: [indexPath])
                case .common:
                    break
                }
            })
            }, completion: { (finish) in
                completion?(finish)
        })
    }
}
